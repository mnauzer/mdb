// Standardized Error Handler for Memento Database
// Compatible with JavaScript 1.7
// Prefix: std_

var std_ErrorHandler = {
  // Error severity levels
  SEVERITY: {
    ERROR: 'error',
    WARNING: 'warning',
    INFO: 'info',
    DEBUG: 'debug'
  },
  
  // Error categories
  CATEGORY: {
    VALIDATION: 'validation',
    DATABASE: 'database',
    SYSTEM: 'system',
    BUSINESS_LOGIC: 'business_logic',
    UI: 'ui'
  },
  
  /**
   * Main error handling method
   * @param {Error|String} error - The error object or message
   * @param {String} context - Where the error occurred (function name, module, etc.)
   * @param {Object} options - Additional options for error handling
   * @returns {*} - Result of recovery function if provided, otherwise null
   */
  handle: function(error, context, options) {
    options = options || {};
    var severity = options.severity || this.SEVERITY.ERROR;
    var category = options.category || this.CATEGORY.SYSTEM;
    var showToUser = options.showToUser !== undefined ? options.showToUser : true;
    
    // Log the error
    this.logError(error, context, severity, category);
    
    // Show to user if needed
    if (showToUser) {
      this.displayToUser(error, severity);
    }
    
    // Optional recovery
    if (options.recovery && typeof options.recovery === 'function') {
      return options.recovery();
    }
    
    return null;
  },
  
  /**
   * Log error to the error library
   * @param {Error|String} error - The error object or message
   * @param {String} context - Where the error occurred
   * @param {String} severity - Error severity level
   * @param {String} category - Error category
   */
  logError: function(error, context, severity, category) {
    try {
      var errorLib = std_LibraryCache.get(app.data.errors);
      if (!errorLib) return;
      
      var newError = {
        type: severity,
        category: category,
        date: new Date(),
        'memento library': app.activeLib.name || 'unknown',
        library: app.libFile || 'unknown',
        text: error.toString(),
        line: error.lineNumber || null,
        context: context,
        variables: this._logAppState(),
        note: 'Generated by std_ErrorHandler'
      };
      
      errorLib.create(newError);
      
      // Debug logging if enabled
      if (app.debug && severity === this.SEVERITY.DEBUG) {
        message('[DEBUG] ' + error.toString() + ' in ' + context);
      }
    } catch (e) {
      // Fallback if error logging itself fails
      message('Error logging failed: ' + e.toString());
    }
  },
  
  /**
   * Display error message to user
   * @param {Error|String} error - The error object or message
   * @param {String} severity - Error severity level
   */
  displayToUser: function(error, severity) {
    var prefix = severity === this.SEVERITY.ERROR ? 'Chyba: ' : 
                 severity === this.SEVERITY.WARNING ? 'Upozornenie: ' : 'Info: ';
    
    var title = severity === this.SEVERITY.ERROR ? 'Chyba' : 
                severity === this.SEVERITY.WARNING ? 'Upozornenie' : 'Inform√°cia';
    
    var errorMessage = prefix + error.toString();
    
    // Use dialog instead of message
    var myDialog = dialog();
    myDialog.title(title)
            .text(errorMessage)
            .positiveButton('OK', function() {})
            .show();
  },
  
  /**
   * Log current application state
   * @returns {String} - Formatted application state
   */
  _logAppState: function() {
    return 'appName: ' + (app.data ? app.data.name : 'unknown') + '\n' +
           'version: ' + (app.data ? app.data.version : 'unknown') + '\n' +
           'season: ' + (app.season || 'unknown') + '\n' +
           'activeLib: ' + (app.activeLib ? app.activeLib.name : 'unknown') + '\n' +
           'user: ' + user();
  },
  
  /**
   * Create a validation error
   * @param {String} message - Error message
   * @param {String} field - Field that failed validation
   * @param {String} context - Where the error occurred
   * @param {Boolean} showToUser - Whether to show the error to the user
   */
  createValidationError: function(message, field, context, showToUser) {
    var error = new Error(message + (field ? ' (Field: ' + field + ')' : ''));
    return this.handle(error, context, {
      severity: this.SEVERITY.WARNING,
      category: this.CATEGORY.VALIDATION,
      showToUser: showToUser !== undefined ? showToUser : true
    });
  },
  
  /**
   * Create a system error
   * @param {Error|String} error - The error object or message
   * @param {String} context - Where the error occurred
   * @param {Boolean} showToUser - Whether to show the error to the user
   */
  createSystemError: function(error, context, showToUser) {
    return this.handle(error, context, {
      severity: this.SEVERITY.ERROR,
      category: this.CATEGORY.SYSTEM,
      showToUser: showToUser !== undefined ? showToUser : true
    });
  },
  
  /**
   * Create a database error
   * @param {Error|String} error - The error object or message
   * @param {String} context - Where the error occurred
   * @param {Boolean} showToUser - Whether to show the error to the user
   */
  createDatabaseError: function(error, context, showToUser) {
    return this.handle(error, context, {
      severity: this.SEVERITY.ERROR,
      category: this.CATEGORY.DATABASE,
      showToUser: showToUser !== undefined ? showToUser : true
    });
  },
  
  /**
   * Create a business logic error
   * @param {Error|String} error - The error object or message
   * @param {String} context - Where the error occurred
   * @param {Boolean} showToUser - Whether to show the error to the user
   */
  createBusinessError: function(error, context, showToUser) {
    return this.handle(error, context, {
      severity: this.SEVERITY.ERROR,
      category: this.CATEGORY.BUSINESS_LOGIC,
      showToUser: showToUser !== undefined ? showToUser : true
    });
  }
};

// Make available globally
this.std_ErrorHandler = std_ErrorHandler;
