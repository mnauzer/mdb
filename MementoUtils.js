// ==============================================
// MEMENTO DATABASE - UNIVERZ√ÅLNA UTILITY KNI≈ΩNICA
// Verzia: 1.0 | D√°tum: 11.8.2025 | Autor: ASISTANTO
// ==============================================
// Kni≈ænica obsahuje najƒçastej≈°ie pou≈æ√≠van√© funkcie
// pre v≈°etky Memento scripty
// Import: var MementoUtils = require("MementoUtils.js");
// ==============================================

var MementoUtils = (function() {
    'use strict';
    
    // ========================================
    // KONFIGURAƒåN√â KON≈†TANTY
    // ========================================
    var DEFAULT_CONFIG = {
        debugFieldName: "Debug_Log",
        errorFieldName: "Error_Log",
        infoFieldName: "info",
        viewFieldName: "view",
        dateFormat: "DD.MM.YY HH:mm",
        timestampFormat: "HH:mm:ss",
        fullTimestampFormat: "YYYY-MM-DD HH:mm:ss"
    };
    
    // ========================================
    // DEBUG A ERROR HANDLING
    // ========================================
    
    /**
     * Prid√° debug spr√°vu do Debug_Log poƒæa
     * @param {Entry} entry - Entry objekt
     * @param {string} message - Debug spr√°va
     * @param {Object} config - Konfigur√°cia (optional)
     */
    function addDebug(entry, message, config) {
        config = config || DEFAULT_CONFIG;
        if (!entry || !message) return;
        
        try {
            var timestamp = moment().format(config.timestampFormat || DEFAULT_CONFIG.timestampFormat);
            var debugMessage = "[" + timestamp + "] " + message;
            
            var fieldName = config.debugFieldName || DEFAULT_CONFIG.debugFieldName;
            var existingDebug = safeFieldAccess(entry, fieldName, "");
            entry.set(fieldName, existingDebug + debugMessage + "\n");
        } catch (e) {
            // Ak debug zlyhal, aspo≈à sk√∫sime message()
            message("Debug failed: " + e);
        }
    }
    
    /**
     * Prid√° error spr√°vu do Error_Log poƒæa
     * @param {Entry} entry - Entry objekt
     * @param {string} errorMessage - Error spr√°va
     * @param {string} version - Verzia scriptu (optional)
     * @param {Object} config - Konfigur√°cia (optional)
     */
    function addError(entry, errorMessage, version, config) {
        config = config || DEFAULT_CONFIG;
        if (!entry || !errorMessage) return;
        
        try {
            var timestamp = moment().format(config.fullTimestampFormat || DEFAULT_CONFIG.fullTimestampFormat);
            var versionString = version ? " v" + version + " -" : "";
            var errorLog = "[" + timestamp + "]" + versionString + " " + errorMessage;
            
            var fieldName = config.errorFieldName || DEFAULT_CONFIG.errorFieldName;
            var existingError = safeFieldAccess(entry, fieldName, "");
            entry.set(fieldName, existingError + errorLog + "\n");
        } catch (e) {
            message("Error logging failed: " + e);
        }
    }
    
    /**
     * Prid√° info z√°znam s detailmi o automatickej akcii
     * @param {Entry} entry - Entry objekt
     * @param {string} action - Popis akcie
     * @param {Object} details - Detaily (sourceId, libraryName, reason, etc.)
     * @param {Object} config - Konfigur√°cia (optional)
     */
    function addInfo(entry, action, details, config) {
        config = config || DEFAULT_CONFIG;
        if (!entry || !action) return;
        
        try {
            var timestamp = moment().format(DEFAULT_CONFIG.dateFormat);
            var infoMessage = "üìã [" + timestamp + "] " + action;
            
            if (details) {
                if (details.sourceId) infoMessage += "\n   ‚Ä¢ Zdroj: #" + details.sourceId;
                if (details.libraryName) infoMessage += " (" + details.libraryName + ")";
                if (details.reason) infoMessage += "\n   ‚Ä¢ D√¥vod: " + details.reason;
                if (details.method) infoMessage += "\n   ‚Ä¢ Met√≥da: " + details.method;
                if (details.result) infoMessage += "\n   ‚Ä¢ V√Ωsledok: " + details.result;
            }
            
            var fieldName = config.infoFieldName || DEFAULT_CONFIG.infoFieldName;
            var existingInfo = safeFieldAccess(entry, fieldName, "");
            entry.set(fieldName, existingInfo + infoMessage + "\n");
        } catch (e) {
            addError(entry, "Info logging failed: " + e, null, config);
        }
    }
    
    // ========================================
    // NULL-SAFE FIELD ACCESS
    // ========================================
    
    /**
     * Bezpeƒçn√Ω pr√≠stup k poliam s default hodnotou
     * @param {Entry} entry - Entry objekt
     * @param {string} fieldName - N√°zov poƒæa
     * @param {any} defaultValue - Default hodnota ak pole neexistuje
     * @return {any} Hodnota poƒæa alebo default
     */
    function safeFieldAccess(entry, fieldName, defaultValue) {
        if (!entry || !fieldName) return defaultValue || null;
        
        try {
            var value = entry.field(fieldName);
            return (value !== null && value !== undefined) ? value : (defaultValue || null);
        } catch (e) {
            return defaultValue || null;
        }
    }
    
    /**
     * Bezpeƒçn√© z√≠skanie prv√©ho objektu z Link to Entry poƒæa
     * @param {Entry} entry - Entry objekt
     * @param {string} fieldName - N√°zov Link to Entry poƒæa
     * @return {Entry|null} Prv√Ω linknut√Ω objekt alebo null
     */
    function safeGetFirstLink(entry, fieldName) {
        if (!entry || !fieldName) return null;
        
        try {
            var links = entry.field(fieldName);
            if (links && links.length > 0) {
                return links[0];
            }
            return null;
        } catch (e) {
            return null;
        }
    }
    
    /**
     * Bezpeƒçn√© z√≠skanie v≈°etk√Ωch objektov z Link to Entry poƒæa
     * @param {Entry} entry - Entry objekt
     * @param {string} fieldName - N√°zov Link to Entry poƒæa
     * @return {Array} Array linknut√Ωch objektov alebo pr√°zdny array
     */
    function safeGetLinks(entry, fieldName) {
        if (!entry || !fieldName) return [];
        
        try {
            var links = entry.field(fieldName);
            return (links && links.length > 0) ? links : [];
        } catch (e) {
            return [];
        }
    }
    
    // ========================================
    // LINKSFROM OPER√ÅCIE
    // ========================================
    
    /**
     * Bezpeƒçn√© vykonanie linksFrom oper√°cie s debug logom
     * @param {Entry} sourceObject - Zdrojov√Ω objekt (nie pole!)
     * @param {string} targetLibrary - N√°zov cieƒæovej kni≈ænice
     * @param {string} backLinkField - N√°zov poƒæa ktor√© odkazuje sp√§≈•
     * @param {Entry} debugEntry - Entry pre debug log (optional)
     * @return {Array} Array v√Ωsledkov alebo pr√°zdny array
     */
    function safeLinksFrom(sourceObject, targetLibrary, backLinkField, debugEntry) {
        if (!sourceObject || !targetLibrary || !backLinkField) {
            if (debugEntry) {
                addDebug(debugEntry, "‚ùå LinksFrom: Missing parameters");
            }
            return [];
        }
        
        try {
            var results = sourceObject.linksFrom(targetLibrary, backLinkField);
            
            if (debugEntry) {
                if (results && results.length > 0) {
                    addDebug(debugEntry, "‚úÖ LinksFrom '" + targetLibrary + "': " + results.length + " z√°znamov");
                } else {
                    addDebug(debugEntry, "‚ö†Ô∏è LinksFrom '" + targetLibrary + "': 0 z√°znamov");
                }
            }
            
            return results || [];
        } catch (e) {
            if (debugEntry) {
                addError(debugEntry, "LinksFrom failed: " + e.toString());
            }
            return [];
        }
    }
    
    /**
     * Hƒæadanie s√∫visiacich z√°znamov cez r√¥zne vari√°cie n√°zvov pol√≠
     * @param {Entry} sourceObject - Zdrojov√Ω objekt
     * @param {string} targetLibrary - N√°zov cieƒæovej kni≈ænice
     * @param {Array} fieldVariations - Array mo≈æn√Ωch n√°zvov pol√≠ ["Zamestnanec", "Zamestnanci", "Employee"]
     * @param {Entry} debugEntry - Entry pre debug log (optional)
     * @return {Array} Array v√Ωsledkov z prvej √∫spe≈°nej vari√°cie
     */
    function findLinksWithVariations(sourceObject, targetLibrary, fieldVariations, debugEntry) {
        if (!sourceObject || !targetLibrary || !fieldVariations) return [];
        
        for (var i = 0; i < fieldVariations.length; i++) {
            var fieldName = fieldVariations[i];
            var results = safeLinksFrom(sourceObject, targetLibrary, fieldName, null);
            
            if (results && results.length > 0) {
                if (debugEntry) {
                    addDebug(debugEntry, "‚úÖ Found links using field '" + fieldName + "'");
                }
                return results;
            }
        }
        
        if (debugEntry) {
            addDebug(debugEntry, "‚ö†Ô∏è No links found with any variation: " + fieldVariations.join(", "));
        }
        return [];
    }
    
    // ========================================
    // ATRIB√öTY A DEFAULT HODNOTY
    // ========================================
    
    /**
     * Bezpeƒçn√© nastavenie atrib√∫tu (2 parametre!)
     * @param {Entry} entry - Entry objekt
     * @param {string} fieldName - N√°zov Link to Entry poƒæa
     * @param {string} attrName - N√°zov atrib√∫tu
     * @param {any} value - Hodnota atrib√∫tu
     * @param {number} index - Index objektu v poli (default 0)
     */
    function safeSetAttribute(entry, fieldName, attrName, value, index) {
        if (!entry || !fieldName || !attrName) return false;
        index = index || 0;
        
        try {
            entry.field(fieldName).setAttr(attrName, value);
            return true;
        } catch (e) {
            // Fallback na priamy pr√≠stup
            try {
                var links = entry.field(fieldName);
                if (links && links[index]) {
                    links[index].field(fieldName).setAttr(attrName, value);
                    return true;
                }
            } catch (e2) {
                return false;
            }
        }
        return false;
    }
    
    /**
     * Bezpeƒçn√© z√≠skanie atrib√∫tu
     * @param {Entry} entry - Entry objekt
     * @param {string} fieldName - N√°zov Link to Entry poƒæa
     * @param {string} attrName - N√°zov atrib√∫tu
     * @param {number} index - Index objektu v poli (default 0)
     * @param {any} defaultValue - Default hodnota
     */
    function safeGetAttribute(entry, fieldName, attrName, index, defaultValue) {
        if (!entry || !fieldName || !attrName) return defaultValue || null;
        index = index || 0;
        
        try {
            return entry.attr(attrName) || defaultValue || null;
        } catch (e) {
            // Fallback na priamy pr√≠stup
            try {
                var links = entry.field(fieldName);
                if (links && links[index]) {
                    return links[index].attr(attrName) || defaultValue || null;
                }
            } catch (e2) {
                return defaultValue || null;
            }
        }
        return defaultValue || null;
    }
    
    /**
     * Nastavenie default hodnoty ak pole je pr√°zdne a znovu naƒç√≠tanie
     * @param {Entry} entry - Entry objekt
     * @param {string} fieldName - N√°zov poƒæa
     * @param {string} defaultLibrary - N√°zov defaults kni≈ænice
     * @param {string} defaultType - Typ defaultu ktor√Ω hƒæad√°me
     * @return {Array|null} Znovu naƒç√≠tan√© pole alebo null
     */
    function setDefaultAndReload(entry, fieldName, defaultLibrary, defaultType) {
        if (!entry || !fieldName) return null;
        
        var field = entry.field(fieldName);
        if (!field || field.length === 0) {
            try {
                var defaultsLib = libByName(defaultLibrary);
                var defaults = defaultsLib.find("typ", defaultType);
                
                if (defaults && defaults.length > 0) {
                    entry.set(fieldName, defaults[0]);
                    // KRITICK√â: Znovu naƒç√≠ta≈• pole po nastaven√≠
                    return entry.field(fieldName);
                }
            } catch (e) {
                addError(entry, "Failed to set default: " + e);
            }
        }
        return field;
    }
    
    // ========================================
    // VYHƒΩAD√ÅVANIE V KNI≈ΩNICIACH
    // ========================================
    
    /**
     * Vyhƒæadanie entry podƒæa unique poƒæa s vari√°ciami
     * @param {string} libraryName - N√°zov kni≈ænice
     * @param {Array} fieldVariations - Mo≈æn√© n√°zvy unique pol√≠ ["Nick", "nick", "ID"]
     * @param {string} value - Hƒæadan√° hodnota
     * @return {Entry|null} N√°jden√Ω z√°znam alebo null
     */
    function findByUniqueField(libraryName, fieldVariations, value) {
        if (!libraryName || !fieldVariations || !value) return null;
        
        try {
            var targetLib = libByName(libraryName);
            
            for (var i = 0; i < fieldVariations.length; i++) {
                var fieldName = fieldVariations[i];
                var results = targetLib.find(fieldName, value);
                
                if (results && results.length > 0) {
                    return results[0]; // Unique pole, vr√°time prv√Ω
                }
            }
        } catch (e) {
            return null;
        }
        return null;
    }
    
    /**
     * Hƒæadanie zamestnanca podƒæa Nick (alebo in√Ωch vari√°ci√≠)
     * @param {string} nick - Nick zamestnanca
     * @param {string} libraryName - N√°zov kni≈ænice (default "Zamestnanci")
     * @return {Entry|null} Zamestnanec alebo null
     */
    function findEmployeeByNick(nick, libraryName) {
        libraryName = libraryName || "Zamestnanci";
        var nickVariations = ["Nick", "nick", "nickname", "Nickname"];
        return findByUniqueField(libraryName, nickVariations, nick);
    }
    
    // ========================================
    // VALID√ÅCIE
    // ========================================
    
    /**
     * Valid√°cia ƒçi entry m√° v≈°etky po≈æadovan√© polia
     * @param {Entry} entry - Entry objekt
     * @param {Array} requiredFields - Array n√°zvov po≈æadovan√Ωch pol√≠
     * @param {Entry} debugEntry - Entry pre debug (optional)
     * @return {boolean} True ak v≈°etky polia existuj√∫
     */
    function validateRequiredFields(entry, requiredFields, debugEntry) {
        if (!entry || !requiredFields) return false;
        
        var missingFields = [];
        
        for (var i = 0; i < requiredFields.length; i++) {
            var fieldName = requiredFields[i];
            var value = safeFieldAccess(entry, fieldName, null);
            
            if (value === null || value === undefined || value === "") {
                missingFields.push(fieldName);
            }
        }
        
        if (missingFields.length > 0) {
            if (debugEntry) {
                addDebug(debugEntry, "‚ùå Missing required fields: " + missingFields.join(", "));
            }
            return false;
        }
        
        return true;
    }
    
    /**
     * Kontrola ƒçi je entry v spr√°vnom stave pre oper√°ciu
     * @param {Entry} entry - Entry objekt
     * @param {string} fieldName - N√°zov status poƒæa
     * @param {Array} allowedStates - Povolen√© stavy
     * @return {boolean} True ak je stav povolen√Ω
     */
    function validateEntryState(entry, fieldName, allowedStates) {
        if (!entry || !fieldName || !allowedStates) return false;
        
        var currentState = safeFieldAccess(entry, fieldName, null);
        if (!currentState) return false;
        
        for (var i = 0; i < allowedStates.length; i++) {
            if (currentState === allowedStates[i]) {
                return true;
            }
        }
        
        return false;
    }
    
    // ========================================
    // FORM√ÅTOVANIE A KONVERZIE
    // ========================================
    
    /**
     * Form√°tovanie pe≈àa≈ænej sumy
     * @param {number} amount - Suma
     * @param {string} currency - Mena (default "‚Ç¨")
     * @param {number} decimals - Poƒçet desatinn√Ωch miest (default 2)
     * @return {string} Form√°tovan√° suma
     */
    function formatMoney(amount, currency, decimals) {
        currency = currency || "‚Ç¨";
        decimals = decimals !== undefined ? decimals : 2;
        
        if (amount === null || amount === undefined || isNaN(amount)) {
            return "0,00 " + currency;
        }
        
        var formatted = amount.toFixed(decimals).replace(".", ",");
        return formatted + " " + currency;
    }
    
    /**
     * Parse pe≈àa≈ænej sumy zo stringu
     * @param {string} moneyString - String s sumou ("123,45 ‚Ç¨")
     * @return {number} ƒå√≠seln√° hodnota alebo 0
     */
    function parseMoney(moneyString) {
        if (!moneyString) return 0;
        
        try {
            // Odstr√°≈à v≈°etko okrem ƒç√≠siel, bodky a ƒçiarky
            var cleaned = moneyString.replace(/[^\d,.-]/g, "");
            // Nahraƒè ƒçiarku bodkou
            cleaned = cleaned.replace(",", ".");
            var value = parseFloat(cleaned);
            return isNaN(value) ? 0 : value;
        } catch (e) {
            return 0;
        }
    }
    
    /**
     * Form√°tovanie mena pre debug v√Ωpis
     * @param {string} nick - Nick zamestnanca
     * @param {string} surname - Priezvisko (optional)
     * @return {string} Form√°tovan√© meno
     */
    function formatEmployeeName(nick, surname) {
        if (!nick) return "Unknown";
        
        if (surname) {
            return nick + " (" + surname + ")";
        }
        return nick;
    }
    
    // ========================================
    // ƒåASOV√â V√ùPOƒåTY
    // ========================================
    
    /**
     * V√Ωpoƒçet rozdielu ƒçasu v hodin√°ch
     * @param {string} startTime - Zaƒçiatok (HH:mm alebo ISO)
     * @param {string} endTime - Koniec (HH:mm alebo ISO)
     * @param {Date} date - D√°tum pre kontext (optional)
     * @return {number} Poƒçet hod√≠n
     */
    function calculateHours(startTime, endTime, date) {
        if (!startTime || !endTime) return 0;
        
        try {
            var start, end;
            
            // Ak m√°me len ƒças bez d√°tumu
            if (startTime.length <= 5 && endTime.length <= 5) {
                var baseDate = date ? moment(date) : moment();
                start = moment(baseDate.format("YYYY-MM-DD") + " " + startTime);
                end = moment(baseDate.format("YYYY-MM-DD") + " " + endTime);
                
                // Ak koniec je sk√¥r ako zaƒçiatok, prid√°me de≈à
                if (end.isBefore(start)) {
                    end.add(1, "day");
                }
            } else {
                start = moment(startTime);
                end = moment(endTime);
            }
            
            var hours = end.diff(start, "hours", true);
            return Math.round(hours * 100) / 100; // Zaokr√∫hli na 2 desatinn√© miesta
        } catch (e) {
            return 0;
        }
    }
    
    /**
     * Kontrola ƒçi je v√≠kend
     * @param {Date|string} date - D√°tum
     * @return {boolean} True ak je v√≠kend
     */
    function isWeekend(date) {
        try {
            var m = moment(date);
            var day = m.day();
            return day === 0 || day === 6; // Nedeƒæa = 0, Sobota = 6
        } catch (e) {
            return false;
        }
    }
    
    // ========================================
    // BATCH OPER√ÅCIE
    // ========================================
    
    /**
     * Spracovanie viacer√Ωch z√°znamov s error handling
     * @param {Array} items - Array polo≈æiek na spracovanie
     * @param {Function} processFunction - Funkcia na spracovanie ka≈ædej polo≈æky
     * @param {Entry} debugEntry - Entry pre debug log (optional)
     * @return {Object} V√Ωsledky spracovania {success: [], failed: []}
     */
    function processBatch(items, processFunction, debugEntry) {
        var results = {
            success: [],
            failed: [],
            total: 0
        };
        
        if (!items || !processFunction) return results;
        
        results.total = items.length;
        
        for (var i = 0; i < items.length; i++) {
            try {
                var result = processFunction(items[i], i);
                if (result) {
                    results.success.push({
                        index: i,
                        item: items[i],
                        result: result
                    });
                } else {
                    results.failed.push({
                        index: i,
                        item: items[i],
                        error: "Processing returned false/null"
                    });
                }
            } catch (e) {
                results.failed.push({
                    index: i,
                    item: items[i],
                    error: e.toString()
                });
                
                if (debugEntry) {
                    addError(debugEntry, "Batch processing error at index " + i + ": " + e);
                }
            }
        }
        
        if (debugEntry) {
            addDebug(debugEntry, "Batch processed: " + results.success.length + "/" + results.total + " successful");
        }
        
        return results;
    }
    
    // ========================================
    // PUBLIC API
    // ========================================
    return {
        // Debug a Error handling
        addDebug: addDebug,
        addError: addError,
        addInfo: addInfo,
        
        // Field access
        safeFieldAccess: safeFieldAccess,
        safeGetFirstLink: safeGetFirstLink,
        safeGetLinks: safeGetLinks,
        
        // LinksFrom oper√°cie
        safeLinksFrom: safeLinksFrom,
        findLinksWithVariations: findLinksWithVariations,
        
        // Atrib√∫ty
        safeSetAttribute: safeSetAttribute,
        safeGetAttribute: safeGetAttribute,
        setDefaultAndReload: setDefaultAndReload,
        
        // Vyhƒæad√°vanie
        findByUniqueField: findByUniqueField,
        findEmployeeByNick: findEmployeeByNick,
        
        // Valid√°cie
        validateRequiredFields: validateRequiredFields,
        validateEntryState: validateEntryState,
        
        // Form√°tovanie
        formatMoney: formatMoney,
        parseMoney: parseMoney,
        formatEmployeeName: formatEmployeeName,
        
        // ƒåasov√© v√Ωpoƒçty
        calculateHours: calculateHours,
        isWeekend: isWeekend,
        
        // Batch oper√°cie
        processBatch: processBatch,
        
        // Konfigur√°cia
        DEFAULT_CONFIG: DEFAULT_CONFIG
    };
})();

// Export pre Memento
if (typeof module !== 'undefined' && module.exports) {
    module.exports = MementoUtils;
}