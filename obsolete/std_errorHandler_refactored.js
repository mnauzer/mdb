// Standardized Error Handler for Memento Database
// Compatible with JavaScript 1.7
// Prefix: std_

/**
 * Error handler module that provides standardized error handling
 * This module can be used directly in Memento Database scripts
 * without requiring the ASISTANTO Scripts table.
 */

// Create namespace if it doesn't exist
if (typeof std === 'undefined') {
  var std = {};
}

// Error Handler module
std.ErrorHandler = {
  // Error severity levels
  SEVERITY: {
    ERROR: 'error',
    WARNING: 'warning',
    INFO: 'info',
    DEBUG: 'debug'
  },
  
  // Error categories
  CATEGORY: {
    VALIDATION: 'validation',
    DATABASE: 'database',
    SYSTEM: 'system',
    BUSINESS_LOGIC: 'business_logic',
    UI: 'ui'
  },
  
  /**
   * Main error handling method
   * @param {Error|String} error - The error object or message
   * @param {String} context - Where the error occurred (function name, module, etc.)
   * @param {Object} options - Additional options for error handling
   * @returns {*} - Result of recovery function if provided, otherwise null
   */
  handle: function(error, context, options) {
    options = options || {};
    var severity = options.severity || this.SEVERITY.ERROR;
    var category = options.category || this.CATEGORY.SYSTEM;
    var showToUser = options.showToUser !== undefined ? options.showToUser : true;
    
    // Log the error
    this.logError(error, context, severity, category);
    
    // Show to user if needed
    if (showToUser) {
      this.displayToUser(error, severity);
    }
    
    // Optional recovery
    if (options.recovery && typeof options.recovery === 'function') {
      return options.recovery();
    }
    
    return null;
  },
  
  /**
   * Log error to the error library
   * @param {Error|String} error - The error object or message
   * @param {String} context - Where the error occurred
   * @param {String} severity - Error severity level
   * @param {String} category - Error category
   */
  logError: function(error, context, severity, category) {
    try {
      // Get app data if available
      var appData = (typeof app !== 'undefined' && app.data) ? app.data : null;
      var errorLibName = appData ? appData.errors : 'ASISTANTO Errors';
      
      // Get the error library
      var errorLib;
      if (typeof std !== 'undefined' && std.LibraryCache) {
        errorLib = std.LibraryCache.get(errorLibName);
      } else {
        errorLib = libByName(errorLibName);
      }
      
      if (!errorLib) return;
      
      var newError = {
        type: severity,
        category: category,
        date: new Date(),
        'memento library': (typeof app !== 'undefined' && app.activeLib) ? app.activeLib.name || 'unknown' : 'unknown',
        library: (typeof app !== 'undefined') ? app.libFile || 'unknown' : 'unknown',
        text: error.toString(),
        line: error.lineNumber || null,
        context: context,
        variables: this._logAppState(),
        note: 'Generated by std.ErrorHandler'
      };
      
      errorLib.create(newError);
      
      // Debug logging if enabled
      if ((typeof app !== 'undefined' && app.debug) && severity === this.SEVERITY.DEBUG) {
        var debugDialog = dialog();
        debugDialog.title('DEBUG')
                   .text(error.toString() + ' in ' + context)
                   .positiveButton('OK', function() {})
                   .show();
      }
    } catch (e) {
      // Fallback if error logging itself fails
      var fallbackDialog = dialog();
      fallbackDialog.title('Error Logging Failed')
                    .text(e.toString())
                    .positiveButton('OK', function() {})
                    .show();
    }
  },
  
  /**
   * Display error message to user
   * @param {Error|String} error - The error object or message
   * @param {String} severity - Error severity level
   */
  displayToUser: function(error, severity) {
    var prefix = severity === this.SEVERITY.ERROR ? 'Chyba: ' : 
                 severity === this.SEVERITY.WARNING ? 'Upozornenie: ' : 'Info: ';
    
    var title = severity === this.SEVERITY.ERROR ? 'Chyba' : 
                severity === this.SEVERITY.WARNING ? 'Upozornenie' : 'Inform√°cia';
    
    var errorMessage = prefix + error.toString();
    
    // Use dialog instead of message
    var myDialog = dialog();
    myDialog.title(title)
            .text(errorMessage)
            .positiveButton('OK', function() {})
            .show();
  },
  
  /**
   * Log current application state
   * @returns {String} - Formatted application state
   */
  _logAppState: function() {
    var appData = (typeof app !== 'undefined' && app.data) ? app.data : { name: 'unknown', version: 'unknown' };
    var season = (typeof app !== 'undefined') ? app.season || 'unknown' : 'unknown';
    var activeLib = (typeof app !== 'undefined' && app.activeLib) ? app.activeLib.name || 'unknown' : 'unknown';
    
    return 'appName: ' + appData.name + '\n' +
           'version: ' + appData.version + '\n' +
           'season: ' + season + '\n' +
           'activeLib: ' + activeLib + '\n' +
           'user: ' + user();
  },
  
  /**
   * Create a validation error
   * @param {String} message - Error message
   * @param {String} field - Field that failed validation
   * @param {String} context - Where the error occurred
   * @param {Boolean} showToUser - Whether to show the error to the user
   */
  createValidationError: function(message, field, context, showToUser) {
    var error = new Error(message + (field ? ' (Field: ' + field + ')' : ''));
    return this.handle(error, context, {
      severity: this.SEVERITY.WARNING,
      category: this.CATEGORY.VALIDATION,
      showToUser: showToUser !== undefined ? showToUser : true
    });
  },
  
  /**
   * Create a system error
   * @param {Error|String} error - The error object or message
   * @param {String} context - Where the error occurred
   * @param {Boolean} showToUser - Whether to show the error to the user
   */
  createSystemError: function(error, context, showToUser) {
    return this.handle(error, context, {
      severity: this.SEVERITY.ERROR,
      category: this.CATEGORY.SYSTEM,
      showToUser: showToUser !== undefined ? showToUser : true
    });
  },
  
  /**
   * Create a database error
   * @param {Error|String} error - The error object or message
   * @param {String} context - Where the error occurred
   * @param {Boolean} showToUser - Whether to show the error to the user
   */
  createDatabaseError: function(error, context, showToUser) {
    return this.handle(error, context, {
      severity: this.SEVERITY.ERROR,
      category: this.CATEGORY.DATABASE,
      showToUser: showToUser !== undefined ? showToUser : true
    });
  },
  
  /**
   * Create a business logic error
   * @param {Error|String} error - The error object or message
   * @param {String} context - Where the error occurred
   * @param {Boolean} showToUser - Whether to show the error to the user
   */
  createBusinessError: function(error, context, showToUser) {
    return this.handle(error, context, {
      severity: this.SEVERITY.ERROR,
      category: this.CATEGORY.BUSINESS_LOGIC,
      showToUser: showToUser !== undefined ? showToUser : true
    });
  }
};

// For backward compatibility
var std_ErrorHandler = std.ErrorHandler;
